<?php

namespace app\models;

use Yii;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "films".
 *
 * @property int $id
 * @property string $name
 * @property string $year
 * @property string $description
 * @property string $url
 * @property int $created_at
 * @property int $updated_at
 * @property int $director_id
 *
 * @property Director $director
 * @property FilmsGenre[] $filmsGenres
 * @property Genre[] $genres
 */
class Films extends ActiveRecord
{

    public $genre_arr;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'films';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'year', 'description', 'director_id'], 'required'],
            [['description'], 'string'],
            [['director_id'], 'integer'],
            [['name', 'url'], 'string', 'max' => 32],
            [['year'], 'string', 'max' => 10],
            [['director_id'], 'exist', 'skipOnError' => true, 'targetClass' => Director::className(), 'targetAttribute' => ['director_id' => 'id']],
            [['genre_arr'], 'safe'],
        ];
    }

    public function behaviors()
    {

        return [
            TimestampBehavior::className(),
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'name',
                'slugAttribute' => 'url',//default name slug
                'immutable' => true,
            ]

        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'year' => 'Год',
            'description' => 'Описание',
            'url' => 'Url',
            'created_at' => 'Дата Создания',
            'updated_at' => 'Дата Изменения',
            'director_id' => 'Режисер',
            'genre_arr' => 'Жанры'
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDirector()
    {
        return $this->hasOne(Director::className(), ['id' => 'director_id']);
    }


    public function getDirectorName() {

        return isset($this->director)?$this->director->name." ".$this->director->surname:"Ошибка связи";
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFilmsGenres()
    {
        return $this->hasMany(FilmsGenre::className(), ['films_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGenres()
    {
        return $this->hasMany(Genre::className(), ['id' => 'genre_id'])->viaTable('films_genre', ['films_id' => 'id']);
    }

    public function getGenreAsString()
    {
        $arr = ArrayHelper::map($this->genres,'id', 'name');
        return implode(", ", $arr);
    }

    public function afterFind()
    {
//        $this->genre_arr=$this->genres;
        $this->genre_arr=ArrayHelper::map($this->genres,'id', 'id');
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $oldGenres = ArrayHelper::map($this->genres,'id', 'id');
        foreach ($this->genre_arr as $item) {
            if(!in_array($item,$oldGenres)) {
                $model = new FilmsGenre();
                $model->films_id = $this->id;
                $model->genre_id = $item;
                $model->save();
            }
            if(isset($oldGenres[$item]))
                unset($oldGenres[$item]);
        }
        FilmsGenre::deleteAll(['genre_id'=>$oldGenres]);
//        if(!is_array($this->genre_arr)) {
//            $oldGenres = ArrayHelper::map($this->genres, 'id', 'id');
//            foreach ($this->genre_arr as $item) {
//                if(isset($oldGenres[$item]))
//                    unset($oldGenres[$item]);
//            }
//            FilmsGenre::deleteAll(['genre_id'=>$oldGenres]);
//        }

    }


   public function beforeDelete()
   {
       if(parent::beforeDelete()) {
           FilmsGenre::deleteAll(['films_id'=> $this->id]);
           return true;
       }
       else
           return false;
   }


}
